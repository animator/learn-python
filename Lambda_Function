## Introduction
A Lambda function in Python is a small, anonymous function defined using the `lambda` keyword. Unlike regular functions defined using the `def` keyword, Lambda functions can have any number of arguments but only one expression. The expression is evaluated and returned. Lambda functions are often used for short, simple operations and are commonly utilized as arguments to higher-order functions like `map()`, `filter()`, and `sorted()`.
This helps you to write concise code. 
## Syntax

The syntax of a Lambda function is as follows:
lambda arguments : expression

## Examples of Lambda function
```python 
x = lambda x:x**2
print(x(2)) 
```
## Output
``` Output
4
```
## When to use lambda functions
Lambda functions are best suited for situations where you need a small, simple function for a short period and are not going to reuse it elsewhere. Lambda functions are commonly used as arguments for higher-order functions such as map(), filter(), sorted(), and reduce(). They provide a concise way to define simple functions inline.
## Difference between Def function and lambda function
The def function is useful for taking multiple expressions,  it is used for writing multiple lines of code. We can use comments and function descriptions for easy readability.

## Example of writing function using def keyword
```python
def add_def(x, y):
    return x + y

# Usage
result = add_def(3, 5)
print(result)

```
## Output
```Output
8
```
## Example of writing function using lambda
```python
add_lambda = lambda x, y: x + y
result = add_lambda(3, 5)
print(result)
```
## Output
```Output
8
```
Now let us see some most frequent use of lambda functions
## Lambda function using map()
The map() function applies a given function to all items in an input list (or any other iterable) and returns a map object (which can be converted to a list, set, etc.)
``` python
numbers = [1, 2, 3, 4, 5]
squared = list(map(lambda x: x ** 2, numbers))
print(squared)  # Output: [1, 4, 9, 16, 25]
```
## Output
```Output
[1, 4, 9, 16, 25]
```
## Using filter()
```python
numbers = [1, 2, 3, 4, 5]
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print(even_numbers) 
```
## Output
```Output
2 4
```
## Using reduce()
```python
from functools import reduce

numbers = [1, 2, 3, 4, 5]
product = reduce(lambda x, y: x * y, numbers)
print(product)  # Output: 120
```
## Output
```Output
120
```
## Conclusion
Lambda functions are a powerful Python feature that provides a concise and expressive way to create small, anonymous functions. It offers flexibility and convenience in situations where defining a named function would be overkill or impractical. While they can make code more concise, they can also make it less readable, especially when used for complex logic. In such cases, it's often better to define a named function using the def keyword, as it promotes clarity, reusability, and easier debugging.
